PROGRAM, STATEMENT, NEWLINE, DECLARATION_STATEMENT, ASSIGNMENT_STATEMENT, WHILE_STATEMENT, IF_STATEMENT, EXPRESSION, TYPE, PRIMITIVE_TYPE, LIST_TYPE, FUNCTION_EXPRESSION, VALUE_EXPRESSION, NO_ARGUMENT_FUNCTION, ONE_ARGUMENT_FUNCTION, TWO_ARGUMENT_FUNCTION, THREE_ARGUMENT_FUNCTION, NO_ARGUMENT_FUNCTION_SYMBOL, ONE_ARGUMENT_FUNCTION_SYMBOL, TWO_ARGUMENT_FUNCTION_SYMBOL, THREE_ARGUMENT_FUNCTION_SYMBOL, PRIMITIVE_VALUE, LIST_VALUE, LIST_VALUE_EXPRESSION, CONSTANT
<identifier>, <number_constant>, <string_constant>, <boolean_constant>, :, =, while, end, if, else, number, string, boolean, (, ), read, write, >#, !, ðŸ˜‚, +, -, *, /, ^, ==, !=, <=, >=, >, <, &, or, ?
PROGRAM
PROGRAM -> STATEMENT | STATEMENT PROGRAM
STATEMENT -> DECLARATION_STATEMENT | ASSIGNMENT_STATEMENT | WHILE_STATEMENT | IF_STATEMENT | EXPRESSION
DECLARATION_STATEMENT -> <identifier> : type = EXPRESSION
ASSIGNMENT_STATEMENT -> <identifier> = EXPRESSION
WHILE_STATEMENT -> while EXPRESSION PROGRAM end
IF_STATEMENT -> if EXPRESSION PROGRAM end
IF_STATEMENT -> if EXPRESSION PROGRAM else PROGRAM end
TYPE -> PRIMITIVE_TYPE | LIST_TYPE
PRIMITIVE_TYPE -> number | string | boolean
LIST_TYPE -> ( TYPE )
EXPRESSION -> FUNCTION_EXPRESSION | VALUE_EXPRESSION
FUNCTION_EXPRESSION -> NO_ARGUMENT_FUNCTION | ONE_ARGUMENT_FUNCTION | TWO_ARGUMENT_FUNCTION | THREE_ARGUMENT_FUNCTION
NO_ARGUMENT_FUNCTION -> NO_ARGUMENT_FUNCTION_SYMBOL
NO_ARGUMENT_FUNCTION_SYMBOL -> read
ONE_ARGUMENT_FUNCTION -> ONE_ARGUMENT_FUNCTION_SYMBOL EXPRESSION
ONE_ARGUMENT_FUNCTION_SYMBOL -> write | ># | ! | ðŸ˜‚
TWO_ARGUMENT_FUNCTION -> TWO_ARGUMENT_FUNCTION_SYMBOL EXPRESSION EXPRESSION
TWO_ARGUMENT_FUNCTION_SYMBOL -> + | - | * | / | ^ | == | != | <= | >= | > | < | & | or
THREE_ARGUMENT_FUNCTION -> THREE_ARGUMENT_FUNCTION_SYMBOL EXPRESSION EXPRESSION EXPRESSION 
THREE_ARGUMENT_FUNCTION_SYMBOL -> ?
VALUE_EXPRESSION -> PRIMITIVE_VALUE | LIST_VALUE
PRIMITIVE_VALUE -> <identifier> | CONSTANT
LIST_VALUE -> () | ( LIST_VALUE_EXPRESSION )
LIST_VALUE_EXPRESSION -> EXPRESSION
LIST_VALUE_EXPRESSION -> EXPRESSION LIST_VALUE_EXPRESSION
CONSTANT -> <number_constant> | <string_constant> | <boolean_constant>
